networks:
  4agql_network_dev:
    driver: bridge
services:
  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    ports:
      - "${HOST_PORT_TRAEFIK}:80"
      - "${HOST_PORT_TRAEFIK_DASHBOARD}:8080"
    command:
      - "--api.insecure=true"            
      - "--providers.docker=true"      
      - "--entrypoints.web.address=:80"  
      - "--ping=true"
      - "--ping.entrypoint=web" 
      - "--log.level=DEBUG"
      - "--accesslog=true"     
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"               
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 25s
    networks:
      - 4agql_network_dev

  database:
    image: mongo:latest
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 25s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
    ports:
      - "${HOST_PORT_MONGODB}:27017"
    volumes:
      - ./mongo-init-scripts:/docker-entrypoint-initdb.d
    networks:
    - 4agql_network_dev

  front-service:
    build:
      context: ./front-service
      dockerfile: Dockerfile
    volumes:
      - ./front-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - 4agql_network_dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.front.rule=Host(`localhost`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.front.entrypoints=web"
      - "traefik.http.services.front.loadbalancer.server.port=5173"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5173"]
      interval: 12s
      timeout: 7s
      retries: 20
      start_period: 240s

  users-service:
    build:
      context: .
      dockerfile: Dockerfile.workspace.dev
      target: users-service
    volumes:
      - ./users-service:/usr/src/app/users-service
      - ./common:/usr/src/app/common
      - target-volume:/usr/src/app/target
    depends_on:
      - database
    healthcheck:
      test: ["CMD", "curl", "--fail", "-X", "POST", "http://localhost:8080/api/users/graphql", "-H", "Content-Type: application/json", "-d", "{\"query\":\"{ healthCheck }\"}"]
      interval: 12s
      timeout: 7s
      retries: 20
      start_period: 240s
    networks:
      - 4agql_network_dev
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_USERS_SERVICE: ${DATABASE_URL_USERS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.rule=PathPrefix(`/api/users`)"
      - "traefik.http.routers.users.entrypoints=web"
      - "traefik.http.services.users.loadbalancer.server.port=8080"
      - "traefik.http.routers.users.priority=10"

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.workspace.dev
      target: auth-service
    volumes:
      - ./auth-service:/usr/src/app/auth-service
      - ./common:/usr/src/app/common
      - target-volume:/usr/src/app/target
    depends_on:
      - database
    healthcheck:
      test: ["CMD", "curl", "--fail", "-X", "POST", "http://localhost:8080/api/auth/graphql", "-H", "Content-Type: application/json", "-d", "{\"query\":\"{ healthCheck }\"}"]
      interval: 12s
      timeout: 7s
      retries: 20
      start_period: 240s
    networks:
      - 4agql_network_dev
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_AUTH_SERVICE: ${DATABASE_URL_AUTH_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"
      - "traefik.http.routers.auth.priority=10"

  grades-service:
    build:
      context: .
      dockerfile: Dockerfile.workspace.dev
      target: grades-service
    volumes:
      - ./grades-service:/usr/src/app/grades-service
      - ./common:/usr/src/app/common
      - target-volume:/usr/src/app/target
    depends_on:
      - database
    healthcheck:
      test: ["CMD", "curl", "--fail", "-X", "POST", "http://localhost:8080/api/grades/graphql", "-H", "Content-Type: application/json", "-d", "{\"query\":\"{ healthCheck }\"}"]
      interval: 12s
      timeout: 7s
      retries: 20
      start_period: 240s
    networks:
      - 4agql_network_dev
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_GRADES_SERVICE: ${DATABASE_URL_GRADES_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grades.rule=PathPrefix(`/api/grades`)"
      - "traefik.http.routers.grades.entrypoints=web"
      - "traefik.http.services.grades.loadbalancer.server.port=8080"
      - "traefik.http.routers.grades.priority=10"

volumes:
  target-volume:
